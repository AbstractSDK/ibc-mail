{
  "contract_name": "module-schema",
  "contract_version": "0.22.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "App instantiate message",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execute messages",
    "oneOf": [
      {
        "description": "Send a message",
        "type": "object",
        "required": [
          "send_message"
        ],
        "properties": {
          "send_message": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/definitions/NewMessage"
              },
              "route": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AccountTrace"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Receive a message from the server",
        "type": "object",
        "required": [
          "receive_message"
        ],
        "properties": {
          "receive_message": {
            "$ref": "#/definitions/Message"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the client configuration",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "Message": {
        "type": "object",
        "required": [
          "body",
          "id",
          "recipient",
          "sender",
          "subject",
          "timestamp",
          "version"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "recipient": {
            "$ref": "#/definitions/Recipient"
          },
          "sender": {
            "$ref": "#/definitions/Sender"
          },
          "subject": {
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/definitions/Timestamp"
          },
          "version": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Namespace": {
        "description": "Represents an Abstract namespace for modules",
        "type": "string"
      },
      "NewMessage": {
        "description": "STruct representing new message to send to another client",
        "type": "object",
        "required": [
          "body",
          "recipient",
          "subject"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "recipient": {
            "$ref": "#/definitions/Recipient"
          },
          "subject": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Recipient": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "chain": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChainName"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "id": {
                    "$ref": "#/definitions/AccountId"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "namespace": {
                "type": "object",
                "required": [
                  "namespace"
                ],
                "properties": {
                  "chain": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChainName"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "namespace": {
                    "$ref": "#/definitions/Namespace"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Sender": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "chain": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChainName"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "id": {
                    "$ref": "#/definitions/AccountId"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "App query messages",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "list_messages"
        ],
        "properties": {
          "list_messages": {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "filter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/MessageFilter"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "$ref": "#/definitions/MessageStatus"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "MessageFilter": {
        "type": "object",
        "properties": {
          "from": {
            "anyOf": [
              {
                "$ref": "#/definitions/Sender"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MessageStatus": {
        "type": "string",
        "enum": [
          "sent",
          "received"
        ]
      },
      "Sender": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "chain": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/ChainName"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "id": {
                    "$ref": "#/definitions/AccountId"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "additionalProperties": false
    },
    "list_messages": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MessagesResponse",
      "type": "object",
      "required": [
        "messages"
      ],
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountId": {
          "description": "Unique identifier for an account. On each chain this is unique.",
          "type": "object",
          "required": [
            "seq",
            "trace"
          ],
          "properties": {
            "seq": {
              "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "trace": {
              "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
              "allOf": [
                {
                  "$ref": "#/definitions/AccountTrace"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AccountTrace": {
          "description": "The identifier of chain that triggered the account creation",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "local"
              ]
            },
            {
              "type": "object",
              "required": [
                "remote"
              ],
              "properties": {
                "remote": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ChainName"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "Message": {
          "type": "object",
          "required": [
            "body",
            "id",
            "recipient",
            "sender",
            "subject",
            "timestamp",
            "version"
          ],
          "properties": {
            "body": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "recipient": {
              "$ref": "#/definitions/Recipient"
            },
            "sender": {
              "$ref": "#/definitions/Sender"
            },
            "subject": {
              "type": "string"
            },
            "timestamp": {
              "$ref": "#/definitions/Timestamp"
            },
            "version": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Namespace": {
          "description": "Represents an Abstract namespace for modules",
          "type": "string"
        },
        "Recipient": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "account"
              ],
              "properties": {
                "account": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "chain": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/ChainName"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "id": {
                      "$ref": "#/definitions/AccountId"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "namespace"
              ],
              "properties": {
                "namespace": {
                  "type": "object",
                  "required": [
                    "namespace"
                  ],
                  "properties": {
                    "chain": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/ChainName"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "namespace": {
                      "$ref": "#/definitions/Namespace"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Sender": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "account"
              ],
              "properties": {
                "account": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "chain": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/ChainName"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "id": {
                      "$ref": "#/definitions/AccountId"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
